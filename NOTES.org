#+TITLE: taxy.el Notes

* Ideas

** PROJECT Publish taxy-magit-section separately
:LOGBOOK:
- State "PROJECT"    from              [2021-09-28 Tue 00:56]
:END:

+ [[https://lists.gnu.org/archive/html/emacs-devel/2021-09/msg01970.html][Stefan asks that it be in a separate repo or branch]]

** PROJECT EWOC-based UI
:LOGBOOK:
- State "PROJECT"    from              [2021-09-26 Sun 04:28]
:END:

Could be a useful alternative to =taxy-magit-section= sometimes.

[2021-09-26 Sun 03:11] WIP/POC in the =wip/ewoc= branch.  Seems promising, and the code is pretty simple, but it needs some more work.  Supposedly EWOCs can be nested, but I'm not sure if this is the right way to do it.

** PROJECT =tree-widget= based UI
:LOGBOOK:
- State "PROJECT"    from              [2021-09-28 Tue 12:44]
:END:

+ [[*hierarchy.el][hierarchy.el's implementation]]

** Deffy

*** TODO Store only directory for project view
:LOGBOOK:
- State "TODO"       from              [2021-09-26 Sun 04:28]
:END:

That way, refreshing the buffer will discover new files.

** Useful functions from [[id:8d9adb33-3f14-4667-a03e-bd5c6656d178][taxonomy Python package]]

It's specifically intended for biological taxonomies, but some of the functions listed there may be useful, e.g. ~lineage~, ~prune~.

* References

** [[https://github.com/volrath/treepy.el][treepy.el]]

I'm guessing that Treepy can be used with Taxy structs pretty easily.  It might be good to demonstrate how to use them together.

** hierarchy.el

Damien Cassou's package works very differently: it stores a hierarchy as a struct that uses hash tables to map items to their parents.

The way it uses =tree-widget= should be instructive: see functions =hierarchy-tree-display= and =hierarchy-convert-to-tree-widget=.

** [[https://pypi.org/project/taxonomy/][taxonomy · PyPI]]
:PROPERTIES:
:ID:       8d9adb33-3f14-4667-a03e-bd5c6656d178
:END:


* Checklists

Copied from =org-ql=.

** Commits

To complete before and after pushing any commit.

*** Additions

When committing an additional feature:

+  [ ] Make WIP branch
+  [ ] Check repo for closing issues
+  [ ] Check magit-todos list of items branched from master
+  [ ] Lint
+  [ ] Test
     -  [ ] Locally
     -  [ ] On different Emacs versions with GitHub CI (very important)
+  [ ] Update docs
+  [ ] Update changelog
     -  [ ] Mention closing issues (optionally)
+  [ ] Commit
     -  [ ] Mention closing issues in commit message
+  [ ] Merge to master
+  [ ] Push master
+  [ ] Close related tasks in this file
+  [ ] Delete WIP branch

*** Fixes

When committing a fix:

+  [ ] Check repo for closing issues
+  [ ] Check magit-todos list of items branched from master
+  [ ] Lint
+  [ ] Test
     -  [ ] Locally
     -  [ ] On different Emacs versions with GitHub CI (very important)
+  [ ] Update changelog
     -  [ ] Mention changes
     -  [ ] Mention closing issues
+  [ ] Commit
     -  [ ] Mention closing issues in commit message
+  [ ] Push
+  [ ] Close related tasks in this file

** Release template

- [ ] =taxy.el= checklist
- [ ] =taxy-magit-section.el= checklist

*** =taxy.el=

+ [ ] Make WIP branch
+ [ ] =Meta= pre-release commit
  - [ ] Update version numbers
    + [ ] =taxy.el=
    + [ ] =README.org=
+ [ ] Complete [[id:d8d7b88e-5737-437e-af76-2253f8340de3][commit checklist]]
+ [ ] Changelog entry
+ [ ] Merge to stable branch
  - [ ] Non-fast-forward merge WIP branch into stable branch
  - [ ] Tag and sign merge commit
+ [ ] Push stable branch
+ [ ] Push tags
+ [ ] Merge to master or make stable branch
+ [ ] Push master/stable
+ [ ] Delete WIP branch
+ [ ] =Meta= post-release commit
  - [ ] Update version numbers (=n+1=-pre)
    + [ ] =taxy.el=
    + [ ] =README.org

*** =taxy-magit-section=

+ [ ] Make WIP branch
+ [ ] =Meta= pre-release commit
  - [ ] Update version numbers
    + [ ] =taxy-magit-section.el=
    + [ ] =README.org=
+ [ ] Complete [[id:d8d7b88e-5737-437e-af76-2253f8340de3][commit checklist]]
+ [ ] Changelog entry
+ [ ] Merge to stable branch
  - [ ] Non-fast-forward merge WIP branch into stable branch
  - [ ] Tag and sign merge commit
+ [ ] Push stable branch
+ [ ] Push tags
+ [ ] Merge to master or make stable branch
+ [ ] Push master/stable
+ [ ] Delete WIP branch
+ [ ] =Meta= post-release commit
  - [ ] Update version numbers (=n+1=-pre)
    + [ ] =taxy-magit-section.el=
    + [ ] =README.org

** Archive

* Code

** Definition to Org

This function returns an Org-formatted entry for a ~deffy-def~ struct.

#+begin_src elisp
  (defun taxy--defs-to-org ()
    (interactive)
    (kill-new
     (mapconcat #'taxy--def-to-org
                (mapcar (lambda (section)
                          (oref section value))
                        (magit-region-sections))
                "\n\n")))

  (defun taxy--def-to-org (def)
    (format "* %s %s\n\n%s"
            (cl-second (deffy-def-form def))
            (concat "=" (mapconcat #'prin1-to-string (cl-third (deffy-def-form def)) " ") "=")
            (taxy--wash-doc (documentation (cl-second (deffy-def-form def))))))

  ;; NOTE: Inexplicably, I can't get the rx upper form to match only
  ;; uppercase characters.  So this is on hold, I guess.

  (defun taxy--wash-doc (string)
    (thread-last string
      (replace-regexp-in-string "\n" " ")
      (replace-regexp-in-string (rx bow (1+ upper) eow)
                                (lambda (s)
                                  (concat "=" (downcase s) "=")))
      ;; (replace-regexp-in-string (rx "‘" (group (1+ (syntax symbol))) "’")
      ;;                           (lambda (s)
      ;;                             (concat "=" (downcase (match-string 1 s)) "=")))
      ))

  (defun taxy--wash-doc (string)
    (with-temp-buffer
      (org-mode)
      (save-excursion
        (insert string))
      (pcase-dolist (`(,match ,rep)
                     (list '("\n" "  ")
                           (list (rx bow (1+ upper) eow)
                                 (lambda (s)
                                   (concat "=" (downcase s) "=")))))
        (save-excursion
          (while (re-search-forward match nil t)
            (replace-match (cl-typecase rep
                             (string rep)
                             (function (funcall rep (match-string 0))))
                           t t nil 0))))
      (buffer-string)))
#+end_src

